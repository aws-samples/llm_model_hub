AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EC2 instance for ModelHubStack'

Metadata: 
  AWS::CloudFormation::Interface: 
    StackName: 
      Default: "ModelHubStack"

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  InstanceType:
    Type: String
    Default: m5.xlarge
    Description: EC2 instance type

  AMIId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/24.04/stable/current/amd64/hvm/ebs-gp3/ami-id
    Description: Ubuntu 24.04 AMI ID

  HuggingFaceHubToken:
    Type: String
    Description: Optional Hugging Face Hub Token
    Default: ""

  WandbApiKey:
    Type: String
    Description: Optional WANDB API Key for view W&B in wandb.ai
    Default: ""

  WandbBaseUrl:
    Type: String
    Description: Optional WANDB Base URL for view W&B own Wandb portal
    Default: ""

  SwanlabApiKey:
    Type: String
    Description: Optional SWANLAB for view Metrics on https://swanlab.cn/
    Default: ""


Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Properties:
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: ModelHubServer
      InstanceType: !Ref InstanceType
      ImageId: !Ref AMIId
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
            VolumeType: gp3
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64:
          !Sub 
            - |
              #!/bin/bash
              # Set up logging
              LOG_FILE="/var/log/user-data.log"
              exec > >(tee -a "$LOG_FILE") 2>&1
              
              echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting UserData script execution"
              # setup cfn-signal
              if [ ! -f /usr/local/bin/cfn-signal ]; then
                echo "Installing cfn-signal for error reporting"
                apt-get update
                apt-get install -y python3-pip python3-venv
                
                # 使用 Python 虚拟环境安装
                python3 -m venv /opt/aws/cfn-bootstrap
                /opt/aws/cfn-bootstrap/bin/pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
                
                # 创建符号链接到 /usr/local/bin
                ln -s /opt/aws/cfn-bootstrap/bin/cfn-signal /usr/local/bin/cfn-signal
                ln -s /opt/aws/cfn-bootstrap/bin/cfn-init /usr/local/bin/cfn-init
                ln -s /opt/aws/cfn-bootstrap/bin/cfn-get-metadata /usr/local/bin/cfn-get-metadata
                ln -s /opt/aws/cfn-bootstrap/bin/cfn-hup /usr/local/bin/cfn-hup
              fi

              chmod +x /usr/local/bin/cfn-signal

              # Define error handling function
              function error_exit {
                echo "ERROR: $1" | tee -a "$LOG_FILE"
                /usr/local/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
                exit 1
              }

              # Update and install basic software
              echo "Updating apt and installing required packages"
              sudo apt-get update || error_exit "Failed to update apt"
              sudo apt-get install -y git unzip || error_exit "Failed to install basic packages"
              
              # Check and install AWS CLI
              if ! command -v aws &> /dev/null; then
                echo "Installing AWS CLI"
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || error_exit "Failed to download AWS CLI"
                unzip awscliv2.zip || error_exit "Failed to unzip AWS CLI"
                sudo ./aws/install || error_exit "Failed to install AWS CLI"
              else
                echo "AWS CLI already installed"
              fi

              # Install Node.js
              echo "Installing Node.js"
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - || error_exit "Failed to setup Node.js repository"
              sudo apt-get install -y nodejs || error_exit "Failed to install Node.js"

              echo "Installing yarn"
              sudo npm install --global yarn || error_exit "Failed to install yarn"

              # Clone repository
              echo "Cloning repository"
              cd /home/ubuntu/ || error_exit "Failed to change to ubuntu home directory"
              sudo -u ubuntu git clone --recurse-submodule https://github.com/aws-samples/llm_model_hub.git || error_exit "Failed to clone repository"
              cd /home/ubuntu/llm_model_hub || error_exit "Failed to change to repository directory"
              sudo -u ubuntu yarn install || error_exit "Failed to run yarn install"

              # Install pm2
              echo "Installing pm2"
              sudo yarn global add pm2 || error_exit "Failed to install pm2"

              # Wait for instance to fully start
              echo "Waiting for instance to fully start"
              sleep 30

              # Get instance metadata
              echo "Retrieving instance metadata"
              TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600") || error_exit "Failed to get metadata token"
              EC2_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/public-ipv4) || error_exit "Failed to get public IP"
              REGION=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/region) || error_exit "Failed to get region"

              echo "Got IP: $EC2_IP and Region: $REGION"

              # Generate random key
              RANDOM_KEY=$(openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1) || error_exit "Failed to generate random key"
              
              # Write environment variables
              echo "Writing environment variables"
              echo "REACT_APP_API_ENDPOINT=http://$EC2_IP:8000/v1" > /home/ubuntu/llm_model_hub/.env || error_exit "Failed to write frontend env file"
              echo "REACT_APP_API_KEY=$RANDOM_KEY" >> /home/ubuntu/llm_model_hub/.env || error_exit "Failed to append to frontend env file"
              echo "REACT_APP_CALCULATOR=https://aws-gpu-memory-caculator.streamlit.app/" >> /home/ubuntu/llm_model_hub/.env || error_exit "Failed to append to frontend env file"

              # Write backend environment variables
              echo "Writing backend environment variables"
              cat << EOF > /home/ubuntu/llm_model_hub/backend/.env || error_exit "Failed to write backend env file"
              AK=
              SK=
              role=${SageMakerRoleArn}
              region=$REGION
              db_host=127.0.0.1
              db_name=llm
              db_user=llmdata
              db_password=llmdata
              api_keys=$RANDOM_KEY
              HUGGING_FACE_HUB_TOKEN=${HuggingFaceHubToken}
              WANDB_API_KEY=${WandbApiKey}
              WANDB_BASE_URL=${WandbBaseUrl}
              SWANLAB_API_KEY=${SwanlabApiKey}
              EOF

              # Set permissions
              echo "Setting proper permissions"
              sudo chown -R ubuntu:ubuntu /home/ubuntu/ || error_exit "Failed to set permissions"

              # Generate random password and store
              RANDOM_PASSWORD=$(openssl rand -base64 12 | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1) || error_exit "Failed to generate random password"
              aws ssm put-parameter --name "/${AWS::StackName}/RandomPassword" --value "$RANDOM_PASSWORD" --type "SecureString" --overwrite --region ${AWS::Region} || error_exit "Failed to store password in SSM"

              # Run setup script
              echo "Running setup script"
              cd /home/ubuntu/llm_model_hub/backend || error_exit "Failed to change to backend directory"
              sudo -u ubuntu bash 01.setup.sh || error_exit "Failed to run setup script"
              sleep 30

              # Build vllm image
              echo "Building and pushing vllm image"
              cd /home/ubuntu/llm_model_hub/backend/byoc || error_exit "Failed to change to byoc directory"
              sudo -u ubuntu bash build_and_push.sh || error_exit "Failed to build and push vllm image"
              sleep 5

              # Build sglang image
              echo "Building and pushing sglang image"
              cd /home/ubuntu/llm_model_hub/backend/byoc || error_exit "Failed to change to byoc directory"
              sudo -u ubuntu bash build_and_push_sglang.sh || error_exit "Failed to build and push sglang image"
              sleep 5

              # Build llamafactory image
              echo "Building and pushing llamafactory image"
              cd /home/ubuntu/llm_model_hub/backend/docker || error_exit "Failed to change to docker directory"
              sudo -u ubuntu bash build_and_push.sh || error_exit "Failed to build and push llamafactory image"
              sleep 5

              # Upload dummy tar.gz
              echo "Uploading dummy tar.gz"
              cd /home/ubuntu/llm_model_hub/backend/byoc || error_exit "Failed to change to byoc directory"
              sudo -u ubuntu ../../miniconda3/envs/py311/bin/python startup.py || error_exit "Failed to upload dummy tar.gz"

              # Add user to database
              echo "Adding user to database"
              cd /home/ubuntu/llm_model_hub/backend/ || error_exit "Failed to change to backend directory"
              sudo -u ubuntu bash -c "source ../miniconda3/bin/activate py311 && python3 users/add_user.py demo_user $RANDOM_PASSWORD default" || error_exit "Failed to add user to database"

              # Start backend
              echo "Starting backend"
              cd /home/ubuntu/llm_model_hub/backend/ || error_exit "Failed to change to backend directory"
              sudo -u ubuntu bash 02.start_backend.sh || error_exit "Failed to start backend"
              sleep 15

              # Start frontend
              echo "Starting frontend"
              cd /home/ubuntu/llm_model_hub/ || error_exit "Failed to change to repository directory"
              sudo -u ubuntu pm2 start pm2run.config.js || error_exit "Failed to start frontend"

              # Send success signal
              echo "Sending success signal to CloudFormation"
              /usr/local/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region} || error_exit "Failed to send success signal"

              echo "RandomPassword=$RANDOM_PASSWORD" >> /etc/environment
              echo "RandomPassword=$RANDOM_PASSWORD"

              echo "UserData script execution completed successfully"
            - SageMakerRoleArn: !GetAtt SageMakerExecutionRole.Arn
              HuggingFaceHubToken: !Ref HuggingFaceHubToken
              WandbApiKey: !Ref WandbApiKey
              WandbBaseUrl: !Ref WandbBaseUrl
              SwanlabApiKey: !Ref SwanlabApiKey



  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, port 8000 and 3000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: CloudFormationSignalPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: cloudformation:SignalResource
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*'


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:CreateBucket
                Resource:
                  - arn:aws:s3:::*
        - PolicyName: SSMSessionManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*'            

  SSMConsoleAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Policies:
        - PolicyName: SSMConsoleAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartSession
                  - ssm:DescribeSessions
                  - ssm:TerminateSession
                  - ssm:ResumeSession
                Resource: '*'

                
Outputs:
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref EC2Instance
  PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  SageMakerRoleArn:
    Description: ARN of the SageMaker Execution Role
    Value: !GetAtt SageMakerExecutionRole.Arn
  RandomPasswordParameter:
    Description: AWS Systems Manager Parameter name for the random password
    Value: !Sub '/${AWS::StackName}/RandomPassword'